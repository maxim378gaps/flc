const translations = {
    ru: {
        get_signal: "–°–ò–ì–ù–ê–õ",
        menu: "–ú–ï–ù–Æ",
        press_signal: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–ò–ì–ù–ê–õ",
        scanning: "–ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª...",
        heads: "–û—Ä—ë–ª",
        tails: "–†–µ—à–∫–∞",
        probability: "–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è:",
        new_session: "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é?",
        start: "–ù–∞—á–∞—Ç—å",
        cancel: "–ú–ï–ù–Æ",
        instruction: "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        instruction_title: "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
        instruction_text: "–ï—Å–ª–∏ –≤—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à —Ä–∞–Ω—å—à–µ, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–≥–Ω–∞–ª—ã, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è 7 –∏–≥—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏.",
    },
    en: {
        get_signal: "SIGNAL",
        menu: "MENU",
        press_signal: "Press the SIGNAL button",
        scanning: "Getting signal...",
        heads: "Heads",
        tails: "Tails",
        probability: "Probability:",
        new_session: "Start a new session?",
        start: "Start",
        cancel: "MENU",
        instruction: "üìñ Instruction",
        instruction_title: "üìñ Instruction",
        instruction_text: "If you took the winnings earlier, close the signal session. To do this, skip the remaining signals, wait for the end of 7 games, and click 'Start' in the notification.",
    },
    in: {
        get_signal: "‡§∏‡§Ç‡§ï‡•á‡§§",
        menu: "‡§Æ‡•á‡§®‡•Ç",
        press_signal: "‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç",
        scanning: "‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
        heads: "‡§π‡•á‡§°",
        tails: "‡§ü‡•á‡§≤",
        probability: "‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ:",
        new_session: "‡§®‡§Ø‡§æ ‡§∏‡§§‡•ç‡§∞ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç?",
        start: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
        cancel: "‡§Æ‡•á‡§®‡•Ç",
        instruction: "üìñ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂",
        instruction_title: "üìñ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂",
        instruction_text: "‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§®‡•á ‡§™‡§π‡§≤‡•á ‡§ú‡•Ä‡§§ ‡§≤‡•Ä ‡§π‡•à, ‡§§‡•ã ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§∏‡§§‡•ç‡§∞ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§ê‡§∏‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§∂‡•á‡§∑ ‡§∏‡§ø‡§ó‡•ç‡§®‡§≤ ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º ‡§¶‡•á‡§Ç, 7 ‡§ó‡•á‡§Æ ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§§‡§ï ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§∏‡•Ç‡§ö‡§®‡§æ ‡§Æ‡•á‡§Ç '‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    },
};

let currentLang = 'ru';
let isTimerRunning = false;
let timerStartTime = null;
const timerDuration = 7000; // 7 —Å–µ–∫—É–Ω–¥
let lastResults = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
let history = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–π

function setLanguage(lang) {
    currentLang = lang;
    document.getElementById('flag-icon').src = `https://flagcdn.com/${lang === 'ru' ? 'ru' : lang === 'en' ? 'us' : 'in'}.svg`;
    document.getElementById('language-text').textContent = `${lang.toUpperCase()} ‚ñº`;
    document.querySelectorAll('[data-key]').forEach(element => {
        const key = element.getAttribute('data-key');
        element.textContent = translations[lang][key];
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–∫–Ω–µ —Ä–µ–Ω–¥–µ—Ä–∞
    const scanText = document.getElementById('scan-text');
    if (scanText.textContent === translations['ru'].press_signal || scanText.textContent === translations['en'].press_signal || scanText.textContent === translations['in'].press_signal) {
        scanText.textContent = translations[lang].press_signal;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    document.getElementById('instruction-title').textContent = translations[lang].instruction_title;
    document.getElementById('instruction-text').textContent = translations[lang].instruction_text;

    toggleLanguageDropdown();
}

function toggleLanguageDropdown() {
    const dropdown = document.getElementById('language-dropdown');
    dropdown.classList.toggle('active');
}

function getRandomResult() {
    let randomResult;

    // –ï—Å–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –±–æ–ª—å—à–µ 9 "–û—Ä–ª–æ–≤" –∏–ª–∏ "–†–µ—à–µ–∫", –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
    if (lastResults.filter(result => result === 0).length >= 10) {
        randomResult = 1; // –í—ã–±–∏—Ä–∞–µ–º "–†–µ—à–∫—É"
    } else if (lastResults.filter(result => result === 1).length >= 10) {
        randomResult = 0; // –í—ã–±–∏—Ä–∞–µ–º "–û—Ä–ª–∞"
    } else {
        randomResult = Math.random() < 0.5 ? 0 : 1; // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤
    lastResults.push(randomResult);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (lastResults.length > 10) {
        lastResults.shift();
    }

    return randomResult;
}

function getProbability(step) {
    switch (step) {
        case 1:
        case 2:
        case 3:
            return (Math.random() * 6 + 92).toFixed(2); // 92.00‚Äì98.00%
        case 4:
            return (Math.random() * 5 + 68).toFixed(2); // 68.00‚Äì73.00%
        case 5:
            return (Math.random() * 9 + 54).toFixed(2); // 54.00‚Äì63.00%
        case 6:
            return (Math.random() * 11 + 30).toFixed(2); // 30.00‚Äì41.00%
        case 7:
            return (Math.random() * 10 + 13).toFixed(2); // 13.00‚Äì23.00%
        default:
            return "100.00";
    }
}

function updateHistory(result) {
    history.push(result);

    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∏–≥–ª–∞ 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (history.length >= 7) {
        setTimeout(() => {
            showNotification();
        }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    const historyCircles = document.querySelectorAll('.history-circle');
    historyCircles.forEach((circle, index) => {
        if (index < history.length) {
            circle.classList.add('filled');
            circle.classList.add(history[index] === 0 ? 'heads' : 'tails');
        } else {
            circle.classList.remove('filled', 'heads', 'tails');
        }
    });
}

function showNotification() {
    const notification = document.getElementById('notification');
    const notificationText = document.getElementById('notification-text');
    const startNewSessionButton = document.getElementById('start-new-session');
    const cancelNewSessionButton = document.getElementById('cancel-new-session');

    notificationText.textContent = translations[currentLang].new_session;
    startNewSessionButton.textContent = translations[currentLang].start;
    cancelNewSessionButton.textContent = translations[currentLang].cancel;

    notification.style.display = 'block';

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    document.getElementById('signal-button').disabled = true;
    document.getElementById('language-button').disabled = true;
    document.getElementById('instruction-button').disabled = true;
}

function resetSession() {
    history = [];
    const historyCircles = document.querySelectorAll('.history-circle');
    historyCircles.forEach(circle => {
        circle.classList.remove('filled', 'heads', 'tails');
    });

    const notification = document.getElementById('notification');
    notification.style.display = 'none';

    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    document.getElementById('signal-button').disabled = false;
    document.getElementById('language-button').disabled = false;
    document.getElementById('instruction-button').disabled = false;
}

function startScanner() {
    if (isTimerRunning) return;

    const scanner = document.getElementById('scanner');
    const scanText = document.getElementById('scan-text');
    const result = document.getElementById('result');
    const outcome = document.getElementById('outcome');
    const probability = document.getElementById('probability');
    const signalButton = document.getElementById('signal-button');
    const timerFill = document.getElementById('timer-fill');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    scanner.style.display = 'block';
    result.style.display = 'none';
    scanText.textContent = translations[currentLang].scanning;
    signalButton.disabled = true;
    isTimerRunning = true;
    timerStartTime = Date.now();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞ –≤ localStorage
    localStorage.setItem('timerStartTime', timerStartTime);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const randomResult = getRandomResult();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–∞–Ω—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
    const step = history.length + 1;
    const randomProbability = getProbability(step);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        scanner.style.display = 'none';
        result.style.display = 'block';
        outcome.textContent = randomResult === 0 ? translations[currentLang].heads : translations[currentLang].tails;
        outcome.className = `outcome ${randomResult === 0 ? 'heads' : 'tails'}`; // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ü–≤–µ—Ç–∞
        probability.textContent = `${translations[currentLang].probability} ${randomProbability}%`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        updateHistory(randomResult);

        // –ß–µ—Ä–µ–∑ 3-4 —Å–µ–∫—É–Ω–¥—ã —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°–ò–ì–ù–ê–õ"
        setTimeout(() => {
            result.style.display = 'none';
            scanner.style.display = 'block';
            scanText.textContent = translations[currentLang].press_signal;
        }, 3000);
    }, 3000);

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    updateTimer();
}

function updateTimer() {
    const timerFill = document.getElementById('timer-fill');
    const signalButton = document.getElementById('signal-button');
    const elapsedTime = Date.now() - timerStartTime;
    const remainingTime = Math.max(0, timerDuration - elapsedTime);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    const fillPercentage = ((timerDuration - remainingTime) / timerDuration) * 100;
    timerFill.style.width = `${fillPercentage}%`;

    if (remainingTime > 0) {
        requestAnimationFrame(updateTimer);
    } else {
        signalButton.disabled = false;
        isTimerRunning = false;
        localStorage.removeItem('timerStartTime'); // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ localStorage
    }
}

function checkTimerOnLoad() {
    const savedStartTime = localStorage.getItem('timerStartTime');
    if (savedStartTime) {
        const elapsedTime = Date.now() - parseInt(savedStartTime, 10);
        if (elapsedTime < timerDuration) {
            isTimerRunning = true;
            timerStartTime = parseInt(savedStartTime, 10);
            document.getElementById('signal-button').disabled = true;
            updateTimer();
        } else {
            localStorage.removeItem('timerStartTime');
        }
    }
}

function createStars() {
    const starsContainer = document.getElementById('stars-container');
    const starCount = 100;

    for (let i = 0; i < starCount; i++) {
        const star = document.createElement('div');
        star.classList.add('star');
        star.style.top = `${Math.random() * 100}%`;
        star.style.left = `${Math.random() * 100}%`;
        star.style.width = `${Math.random() * 3}px`;
        star.style.height = star.style.width;
        star.style.backgroundColor = `rgba(255, 255, 255, ${Math.random()})`;
        star.style.animationDelay = `${Math.random() * 2}s`;
        starsContainer.appendChild(star);
    }
}

function showAlert() {
    const alert = document.getElementById('alert');
    alert.style.display = 'block';
    setTimeout(() => {
        alert.style.animation = 'fadeOut 0.5s ease-out'; // –ü–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        setTimeout(() => {
            alert.style.display = 'none';
        }, 500); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    }, 2500); // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2.5 —Å–µ–∫—É–Ω–¥—ã
}

document.addEventListener('DOMContentLoaded', () => {
    setLanguage(currentLang);
    createStars();
    document.getElementById('language-dropdown').classList.remove('active');
    checkTimerOnLoad();
    showAlert(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å" –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    document.getElementById('start-new-session').addEventListener('click', resetSession);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    document.getElementById('cancel-new-session').addEventListener('click', () => {
        window.location.href = 'menu.html';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
    document.getElementById('instruction-button').addEventListener('click', () => {
        const modal = document.getElementById('instruction-modal');
        modal.style.display = 'block';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.getElementById('close-modal').addEventListener('click', () => {
        const modal = document.getElementById('instruction-modal');
        modal.style.display = 'none';
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    document.getElementById('scan-text').textContent = translations[currentLang].press_signal;
});